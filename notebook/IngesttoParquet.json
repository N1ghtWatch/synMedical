{
	"name": "IngesttoParquet",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spMedical",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "3a93d120-79c1-48de-9d9c-d0a31f74b53f"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/6a4ac82e-930e-4e4d-b385-3cc2c61db5c6/resourceGroups/GECO-C7A/providers/Microsoft.Synapse/workspaces/asawsmedical/bigDataPools/spMedical",
				"name": "spMedical",
				"type": "Spark",
				"endpoint": "https://asawsmedical.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spMedical",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"dfa = spark.read.load('abfss://conc7a@sac7a.dfs.core.windows.net/Medical/Dataset A.csv', format='csv'\r\n",
					"## If header exists uncomment line below\r\n",
					", header=True\r\n",
					")\r\n",
					"\r\n",
					"dfa.createOrReplaceTempView(\"DatasetA\")\r\n",
					"\r\n",
					"dfc = dfa.withColumnRenamed( \"Patient id\" , \"Patient_ID\" ).withColumnRenamed(\"Employee Name\",\"Employee_Name\").withColumn(\"Age\",floor(datediff(current_date(),to_date(\"dob\",\"dd-MM-yyyy\"))/365.25 ))\r\n",
					""
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"dfb = dfc.withColumn(\"Age_Bracket\" ,when( dfc.Age < 18 , \"18 and below\"). \\\r\n",
					"                                    when( dfc.Age < 25 , \"18 - 25\"). \\\r\n",
					"                                    when( dfc.Age < 35 , \"25 - 34\"). \\\r\n",
					"                                    when( dfc.Age < 45 , \"35 - 44\"). \\\r\n",
					"                                    when( dfc.Age < 55 , \"45 - 54\"). \\\r\n",
					"                                    when( dfc.Age < 65 , \"55 - 65\"). \\\r\n",
					"                                    otherwise( \"65 and Over\") ). \\\r\n",
					"         withColumn(\"Birth_Month\" , month( to_date(\"dob\",\"dd-MM-yyyy\")  ) )\r\n",
					"\r\n",
					"dfb.show()\r\n",
					""
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"from pyspark.sql.functions import when\r\n",
					"\r\n",
					"dfc = spark.read.load('abfss://conc7a@sac7a.dfs.core.windows.net/Medical/Dataset B.csv', format='csv'\r\n",
					"## If header exists uncomment line below\r\n",
					", header=True\r\n",
					")\r\n",
					"\r\n",
					"dfc.createOrReplaceTempView(\"Datasetb\")\r\n",
					"\r\n",
					"dfd = dfc.withColumnRenamed( \"P. id\" , \"P_ID\").withColumn(\"In_Military\", when(dfc.military_service == \"yes\" , \"In Military\").otherwise(\"Non-Military\") )\r\n",
					"\r\n",
					"##dfd.show()"
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"dfb.join( dfd , dfb.Patient_ID == dfd.P_ID,\"inner\").show() ##write.mode('overwrite').parquet(\"abfss://conc7a@sac7a.dfs.core.windows.net/medicaldata\")\r\n",
					"\r\n",
					""
				],
				"execution_count": 50
			}
		]
	}
}