{
	"name": "IrisWithoutHeader",
	"properties": {
		"folder": {
			"name": "IrisDatasets"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spMedical",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "01aa6d64-7394-45d1-bb21-e4febb290148"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/6a4ac82e-930e-4e4d-b385-3cc2c61db5c6/resourceGroups/GECO-C7A/providers/Microsoft.Synapse/workspaces/asawsmedical/bigDataPools/spMedical",
				"name": "spMedical",
				"type": "Spark",
				"endpoint": "https://asawsmedical.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spMedical",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"\r\n",
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"df = spark.read.load('abfss://irisdata@sac7a.dfs.core.windows.net/iris_withoutHeader.csv', format='csv'\r\n",
					"    , schema=(\"Sepal_Length float, Sepal_Width float, Petal_Length float , Petal_Width float , Species string\")\r\n",
					")\r\n",
					"\r\n",
					"##display(df.limit(10))\r\n",
					"##df.printSchema()\r\n",
					"\r\n",
					"df.write.mode(\"overwrite\").saveAsTable(\"IrisData\")\r\n",
					""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"\r\n",
					"df.summary(\"count\",\"mean\" , \"stddev\" , \"min\" , \"max\").write.mode(\"overwrite\").saveAsTable(\"IrisSummary\")"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.groupBy(\"Species\").agg( countDistinct(\"Sepal_Length\",\"Sepal_Width\",\"Petal_Length\",\"Petal_Width\").alias(\"DistinctCount\") ).orderBy(\"Species\").write.mode(\"overwrite\").saveAsTable(\"IrisDistinctCount\")"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df2 = df.groupBy( \"Species\").agg( *[sum( col(column)) for column in df.columns] )\r\n",
					"\r\n",
					"df2 = df2.drop( \"sum(Species)\" )\r\n",
					"\r\n",
					"df2 = df2.toDF( \"Species\" , \"Sepal_Length\",\"Sepal_Width\",\"Petal_Length\",\"Petal_Width\" )\r\n",
					"\r\n",
					"##display( df2 )\r\n",
					"df2.write.mode(\"overwrite\").saveAsTable(\"IrisSums\")                                     "
				],
				"execution_count": 8
			}
		]
	}
}