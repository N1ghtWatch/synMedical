{
	"name": "IrisWithoutHeader",
	"properties": {
		"folder": {
			"name": "IrisDatasets"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spMedical",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8f341fc6-ccdd-47b2-8d2a-9422f9fd226d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/6a4ac82e-930e-4e4d-b385-3cc2c61db5c6/resourceGroups/GECO-C7A/providers/Microsoft.Synapse/workspaces/asawsmedical/bigDataPools/spMedical",
				"name": "spMedical",
				"type": "Spark",
				"endpoint": "https://asawsmedical.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spMedical",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"df = spark.read.load('abfss://irisdata@sac7a.dfs.core.windows.net/iris_withoutHeader.csv', format='csv'\r\n",
					"## If header exists uncomment line below\r\n",
					"##, header=True\r\n",
					")\r\n",
					"\r\n",
					"##display(df.limit(10))"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = df.toDF(  \"Sepal_Length\",\"Sepal_Width\",\"Petal_Length\",\"Petal_Width\",\"Species\" )\r\n",
					"\r\n",
					"##display(df.limit(10))"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.createOrReplaceTempView( \"tempTableView\")\r\n",
					"\r\n",
					"df = spark.sql( \"Select float(Sepal_Length),float(Sepal_Width),float(Petal_Length),float(Petal_Width),string(Species) from tempTableView\")\r\n",
					"\r\n",
					"df.printSchema()"
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"df.groupBy(\"Species\").agg( countDistinct(\"Sepal_Length\",\"Sepal_Width\",\"Petal_Length\",\"Petal_Width\").alias('DistinctCount') ).orderBy(\"Species\").show()"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"##Sql Option\r\n",
					"\r\n",
					"df.createOrReplaceTempView( \"tempTableView\")\r\n",
					"\r\n",
					"df2 = spark.sql( \"Select Max( 'Count' ) Summary, Count( Sepal_Length ) Sepal_Length , \\\r\n",
					"                                                 Count( Sepal_Width ) Sepal_Width, \\\r\n",
					"                                                 Count( Petal_Length ) Petal_Length, \\\r\n",
					"                                                 Count( Petal_Width ) Petal_Width, \\\r\n",
					"                                                 Count( Species ) Species from tempTableView \\\r\n",
					"                  Union \\\r\n",
					"                  Select Max( 'Mean' ) , Mean( Sepal_Length )  , \\\r\n",
					"\t\t\t\t\t\t\t\t\t\t\t\t mean( Sepal_Width ) , \\\r\n",
					"                                                 mean( Petal_Length ) , \\\r\n",
					"                                                 mean( Petal_Width ) , \\\r\n",
					"                                                 0  from tempTableView \\\r\n",
					"                  Union \\\r\n",
					"                  Select Max( 'StdDev' ) , StdDev( Sepal_Length )  , \\\r\n",
					"\t\t\t\t\t\t\t\t\t\t\t\t StdDev( Sepal_Width ) , \\\r\n",
					"                                                 StdDev( Petal_Length ) , \\\r\n",
					"                                                 StdDev( Petal_Width ) , \\\r\n",
					"                                                 0  from tempTableView \\\r\n",
					"                  Union \\\r\n",
					"                  Select Max( 'Min' ) , Min( Sepal_Length )  , \\\r\n",
					"\t\t\t\t\t\t\t\t\t\t\t\t Min( Sepal_Width ) , \\\r\n",
					"                                                 Min( Petal_Length ) , \\\r\n",
					"                                                 Min( Petal_Width ) , \\\r\n",
					"                                                 Min( Species )  from tempTableView \\\r\n",
					"                  Union \\\r\n",
					"                  Select Max( 'Max' ) , Max( Sepal_Length )  , \\\r\n",
					"\t\t\t\t\t\t\t\t\t\t\t\t Max( Sepal_Width ) , \\\r\n",
					"                                                 Max( Petal_Length ) , \\\r\n",
					"                                                 Max( Petal_Width ) , \\\r\n",
					"                                                 Max( Species )  from tempTableView \\\r\n",
					"                  \")\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"display( df2.limit(20))"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"## Spark aggregate and union all\r\n",
					"\r\n",
					"df2 = df.agg( max(lit(\"Count\")).alias(\"Summary\") , count( df.Sepal_Length).alias(\"Sepal_Length\") , \\\r\n",
					"                                                   count( df.Sepal_Width).alias(\"Sepal_Width\") , \\\r\n",
					"                                                   count( df.Petal_Length).alias(\"Petal_Length\") , \\\r\n",
					"                                                   count( df.Petal_Width).alias(\"Petal_Width\") , \\\r\n",
					"                                                   count( df.Species).alias(\"Species\")  \\\r\n",
					"                                                    )\r\n",
					"\r\n",
					"df2 = df2.unionAll( df.agg( max(lit(\"Mean\")).alias(\"Summary\") , mean(df.Sepal_Length).alias(\"Sepal_Length\") , \\\r\n",
					"                                                   mean( df.Sepal_Width).alias(\"Sepal_Width\") , \\\r\n",
					"                                                   mean( df.Petal_Length).alias(\"Petal_Length\") , \\\r\n",
					"                                                   mean( df.Petal_Width).alias(\"Petal_Width\") , \\\r\n",
					"                                                   mean( lit(0)).alias(\"Species\")  \\\r\n",
					"                                                    ))\r\n",
					"\r\n",
					"df2 = df2.unionAll( df.agg( max(lit(\"StdDev\")).alias(\"Summary\") , stddev( df.Sepal_Length).alias(\"Sepal_Length\") , \\\r\n",
					"                                                   stddev( df.Sepal_Width).alias(\"Sepal_Width\") , \\\r\n",
					"                                                   stddev( df.Petal_Length).alias(\"Petal_Length\") , \\\r\n",
					"                                                   stddev( df.Petal_Width).alias(\"Petal_Width\") , \\\r\n",
					"                                                   stddev(lit(0)).alias(\"Species\")  \\\r\n",
					"                                                    ))\r\n",
					"\r\n",
					"df2 = df2.unionAll( df.agg( max(lit(\"Min\")).alias(\"Summary\") , min( df.Sepal_Length).alias(\"Sepal_Length\") , \\\r\n",
					"                                                   min( df.Sepal_Width).alias(\"Sepal_Width\") , \\\r\n",
					"                                                   min( df.Petal_Length).alias(\"Petal_Length\") , \\\r\n",
					"                                                   min( df.Petal_Width).alias(\"Petal_Width\") , \\\r\n",
					"                                                   min( df.Species).alias(\"Species\")  \\\r\n",
					"                                                    ))\r\n",
					"\r\n",
					"df2 = df2.unionAll( df.agg( max(lit(\"Max\")).alias(\"Summary\") , max( df.Sepal_Length).alias(\"Sepal_Length\") , \\\r\n",
					"                                                   max( df.Sepal_Width).alias(\"Sepal_Width\") , \\\r\n",
					"                                                   max( df.Petal_Length).alias(\"Petal_Length\") , \\\r\n",
					"                                                   max( df.Petal_Width).alias(\"Petal_Width\") , \\\r\n",
					"                                                   max( df.Species).alias(\"Species\")  \\\r\n",
					"                                                    ))\r\n",
					"\r\n",
					"\r\n",
					"display( df2 )"
				],
				"execution_count": 41
			}
		]
	}
}